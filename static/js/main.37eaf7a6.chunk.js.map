{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","payload","map","contact","id","filter","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","a","async","delete","name","email","phone","className","onClick","style","cursor","float","bind","to","color","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","target","onSubmit","preventDefault","newContact","post","history","push","EditContact","updateContact","match","params","put","Header","branding","About","App","exact","path","component","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37eaf7a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nconst Context = React.createContext();\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts]\n            };\n        case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\n            }\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\n            };\n\n        default:\n            return state;\n\n    }\n}\n\nexport class Provider extends Component {\n    state = {\n        contacts: [],\n        dispatch: action => {\n            this.setState(state => reducer(state, action))\n        }\n    }\n\n    async componentDidMount() {\n        const res = await axios\n            .get(\"https://jsonplaceholder.typicode.com/users\")\n        this.setState({ contacts: res.data });\n\n    }\n\n    render() {\n        return (\n            <Context.Provider value={this.state} >\n                {this.props.children}\n            </Context.Provider >\n        )\n    }\n}\n\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\n\nclass Contact extends Component {\n    // static propTypes = {\n    //     name: PropTypes.string.isRequired,\n    //     email: PropTypes.string.isRequired,\n    //     phone: PropTypes.string.isRequired\n    // };\n    state = {\n        showContactInfo: false,\n    };\n\n    onShowClick = (e) => {\n        this.setState({\n            showContactInfo: !this.state.showContactInfo,\n        });\n    }\n\n    onDeleteClick = async (id, dispatch) => {\n        try {\n            await axios\n                .delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n            dispatch({ type: 'DELETE_CONTACT', payload: id })\n        } catch (error) {\n            dispatch({ type: 'DELETE_CONTACT', payload: id })\n        }\n\n    }\n\n    render() {\n        const { id, name, email, phone } = this.props.contact;\n        const { showContactInfo } = this.state;\n        return (\n            <Consumer>\n                {value => {\n                    const { dispatch } = value;\n                    return (\n\n                        <div className=\"card card-body mb-3\">\n                            <h4>{name} <i onClick={this.onShowClick} className=\"fa fa-sort-down\" style={{ cursor: 'pointer' }} />\n                                <i className=\"fa fa-times\" style={{ cursor: 'pointer', float: 'right' }} onClick={this.onDeleteClick.bind(this, id, dispatch)} />\n                                <Link to={`/contact/edit/${id}`}>\n                                    <i\n                                        className=\"fa fa-pencil\"\n                                        style={{\n                                            cursor: \"pointer\",\n                                            float: \"right\",\n                                            color: \"black\",\n                                            marginRight: \"1rem\"\n                                        }}\n                                    ></i>\n                                </Link>\n                            </h4>\n                            {\n                                showContactInfo ?\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Email: {email}</li>\n                                        <li className=\"list-group-item\">Phone: {phone}</li>\n                                    </ul> : null\n                            }\n                        </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n    // render() {\n    //     return (\n    //         <div>\n    //             <h4>{this.props.name}</h4>\n    //             <ul>\n    //                 <li>Email: {this.props.email}</li>\n    //                 <li>Phone: {this.props.phone}</li>\n    //             </ul>\n    //         </div>\n    //     )\n    // }\n}\n\nContact.propTypes = {\n    contact: PropTypes.object.isRequired,\n}\n\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n\n    render() {\n        return (\n            <Consumer>\n                {value => {\n                    const { contacts } = value;\n                    return (\n                        <React.Fragment>\n                            <h1 className=\"display-4 mb-2\">\n                                <span className=\"text-primary\">\n                                    Contact List\n                            </span>\n                            </h1>\n                            {contacts.map((contact) => (\n                                <Contact contact={contact} key={contact.id} />\n                            ))}\n                        </React.Fragment>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default Contacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n    label,\n    name,\n    value,\n    placeholder,\n    type,\n    onChange,\n    error\n}) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input\n                type={type}\n                name={name}\n                className={classnames(\"form-control form-control-lg\", {\n                    'is-invalid': error\n                })}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n            />\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    )\n}\n\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string\n}\n\nTextInputGroup.defaultProps = {\n    type: 'text'\n}\n\nexport default TextInputGroup;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\n// import uuid from 'uuid';\nimport axios from 'axios';\n\nclass AddContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        const { name, email, phone } = this.state;\n\n        //validate\n        if (name === '') {\n            this.setState({\n                errors: {\n                    name: 'Name is required'\n                }\n            });\n            return;\n        }\n        if (email === '') {\n            this.setState({\n                errors: {\n                    email: 'Email is required'\n                }\n            });\n            return\n        }\n        if (phone === '') {\n            this.setState({\n                errors: {\n                    phone: 'Phone is required'\n                }\n            });\n            return;\n        }\n        const newContact = {\n            // id: uuid(),\n            name,\n            email,\n            phone\n        }\n        const res = await axios\n            .post('https://jsonplaceholder.typicode.com/users', newContact)\n        dispatch({ type: \"ADD_CONTACT\", payload: res.data })\n\n\n        //Clear State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        this.props.history.push('/');\n    }\n    e\n    render() {\n\n        const { name, email, phone, errors } = this.state;\n\n        return (\n            <Consumer>\n                {\n                    value => {\n                        const { dispatch } = value;\n                        return (\n\n                            <div className=\"card mb-3\">\n                                <div className=\"card-header\">Add Contact</div>\n                                <div className=\"card-body\">\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                        <TextInputGroup\n                                            label=\"Name\"\n                                            name=\"name\"\n                                            placeholder=\"Enter Name\"\n                                            value={name}\n                                            onChange={this.onChange}\n                                            error={errors.name}\n                                        />\n                                        <TextInputGroup\n                                            label=\"Email\"\n                                            name=\"email\"\n                                            type=\"email\"\n                                            placeholder=\"Enter Email\"\n                                            value={email}\n                                            onChange={this.onChange}\n                                            error={errors.email}\n                                        />\n                                        <TextInputGroup\n                                            label=\"Phone\"\n                                            name=\"phone\"\n                                            placeholder=\"Enter Phone\"\n                                            value={phone}\n                                            onChange={this.onChange}\n                                            error={errors.phone}\n                                        />\n                                        <input\n                                            type=\"submit\"\n                                            value=\"Add Contact\"\n                                            className=\"btn btn-block btn-primary\"\n                                        />\n                                    </form>\n                                </div>\n                            </div>\n                        )\n                    }\n                }\n            </Consumer>\n        )\n\n    }\n}\n\nexport default AddContact;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\n// import uuid from 'uuid';\nimport axios from 'axios';\n\nclass EditContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    async componentDidMount() {\n        const { id } = this.props.match.params;\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n        const contact = res.data;\n        this.setState({\n            name: contact.name,\n            email: contact.email,\n            phone: contact.phone\n        })\n    }\n\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        const { name, email, phone } = this.state;\n\n        //validate\n        if (name === '') {\n            this.setState({\n                errors: {\n                    name: 'Name is required'\n                }\n            });\n            return;\n        }\n        if (email === '') {\n            this.setState({\n                errors: {\n                    email: 'Email is required'\n                }\n            });\n            return\n        }\n        if (phone === '') {\n            this.setState({\n                errors: {\n                    phone: 'Phone is required'\n                }\n            });\n            return;\n        }\n\n        const updateContact = {\n            name,\n            email,\n            phone\n        }\n\n        const { id } = this.props.match.params;\n\n        const res = await axios\n            .put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\n\n        dispatch({ type: \"UPDATE_CONTACT\", payload: res.data })\n\n        //Clear State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        this.props.history.push('/');\n    }\n    e\n    render() {\n\n        const { name, email, phone, errors } = this.state;\n\n        return (\n            <Consumer>\n                {\n                    value => {\n                        const { dispatch } = value;\n                        return (\n\n                            <div className=\"card mb-3\">\n                                <div className=\"card-header\">Edit Contact</div>\n                                <div className=\"card-body\">\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                        <TextInputGroup\n                                            label=\"Name\"\n                                            name=\"name\"\n                                            placeholder=\"Enter Name\"\n                                            value={name}\n                                            onChange={this.onChange}\n                                            error={errors.name}\n                                        />\n                                        <TextInputGroup\n                                            label=\"Email\"\n                                            name=\"email\"\n                                            type=\"email\"\n                                            placeholder=\"Enter Email\"\n                                            value={email}\n                                            onChange={this.onChange}\n                                            error={errors.email}\n                                        />\n                                        <TextInputGroup\n                                            label=\"Phone\"\n                                            name=\"phone\"\n                                            placeholder=\"Enter Phone\"\n                                            value={phone}\n                                            onChange={this.onChange}\n                                            error={errors.phone}\n                                        />\n                                        <input\n                                            type=\"submit\"\n                                            value=\"Edit Contact\"\n                                            className=\"btn btn-block btn-primary\"\n                                        />\n                                    </form>\n                                </div>\n                            </div>\n                        )\n                    }\n                }\n            </Consumer>\n        )\n\n    }\n}\n\nexport default EditContact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\n\nconst Header = (props) => {\n    const { branding } = props;\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-3 py-0\">\n                <div className=\"container\">\n                    <Link to=\"/\" className=\"navbar-brand\">{branding}</Link>\n                    <div>\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <Link to=\"/\" className=\"nav-link\"> <i className=\"fa fa-home\"></i>  Home</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link to=\"/contact/add\" className=\"nav-link\"><i className=\"fa fa-plus\"></i> Add</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link to=\"/about\" className=\"nav-link\"><i className=\"fa fa-question\"></i> About</Link>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n            </nav>\n        </div>\n    )\n}\n\nHeader.defaultProps = {\n    branding: 'My App'\n}\n\n//prop validation using propTypes\nHeader.propTypes = {\n    branding: PropTypes.string.isRequired\n};\n// const Header = (props) => {\n//     return (\n//         <div>\n//             <h1>{props.branding}</h1>\n//         </div>\n//     )\n// }\n// function Header() {\n//     return (\n//         <div>\n//             <h1>Contact Manager</h1>\n//         </div>\n//     )\n// }\n\nexport default Header;\n","\nimport React from 'react'\n\nexport default function About() {\n    return (\n        <div>\n            <h1 className=\"display-4\">About Contact Manager</h1>\n            <p className=\"lead\">\n                Simple app to manage contacts\n            </p>\n            <p className=\"text-secondary\">Version 1.0.0</p>\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div>\n            <h1 className=\"display-4\">\n                <span className=\"text-primary\">404 Page Not Found</span>\n            </h1>\n            <p className=\"lead\">Sorry, page does not exist</p>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\n\n\nimport { Provider } from './context';\n\n//css Import\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={\n                  Contacts\n                } />\n                <Route exact path=\"/contact/add\" component={\n                  AddContact\n                } />\n                <Route exact path=\"/contact/edit/:id\" component={\n                  EditContact\n                } />\n                <Route exact path=\"/about\" component={\n                  About\n                } />\n                <Route component={\n                  NotFound\n                } />\n\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}